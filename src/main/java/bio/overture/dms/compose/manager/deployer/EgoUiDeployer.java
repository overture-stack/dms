package bio.overture.dms.compose.manager.deployer;

import static bio.overture.dms.compose.model.ComposeServiceResources.EGO_UI;

import bio.overture.dms.compose.manager.ServiceDeployer;
import bio.overture.dms.core.model.dmsconfig.DmsConfig;
import bio.overture.dms.core.model.dmsconfig.EgoConfig;
import bio.overture.dms.ego.client.EgoClient;
import bio.overture.dms.ego.client.EgoService;
import bio.overture.dms.ego.model.CreateApplicationRequest;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Slf4j
@Component
public class EgoUiDeployer {

  private final ServiceDeployer serviceDeployer;

  @Autowired
  public EgoUiDeployer(
      @NonNull ServiceDeployer serviceDeployer ) {
    this.serviceDeployer = serviceDeployer;
  }

  public void deploy(@NonNull EgoClient egoClient,  @NonNull DmsConfig dmsConfig) {
    val uiDeployType = serviceDeployer.deployAndWait(dmsConfig, EGO_UI);
    attemptFinalization(egoClient, dmsConfig.getEgo().getUi());
  }

  private void attemptFinalization(@NonNull EgoClient egoClient, @NonNull EgoConfig.EgoUiConfig egoUiConfig) {
    val service = new EgoService(egoClient);
    val cred = egoUiConfig.getUiAppCredentials();
    val r = CreateApplicationRequest.builder()
        .clientId(cred.getClientId())
        .clientSecret(cred.getClientSecret())
        .name(cred.getName())
        .redirectUri(cred.getRedirectUri())
        .type("ADMIN")
        .status("APPROVED")
        .description("DO NOT EDIT - Autogenerated by DMS - EgoUI application credentials")
        .build();
    service.saveApplication(r);
  }
}
