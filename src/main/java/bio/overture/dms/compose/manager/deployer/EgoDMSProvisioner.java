package bio.overture.dms.compose.manager.deployer;

import static bio.overture.dms.ego.model.PermissionMasks.WRITE;

import bio.overture.dms.compose.model.EgoDmsProvisionSpec;
import bio.overture.dms.core.model.dmsconfig.AppCredential;
import bio.overture.dms.ego.client.EgoService;
import bio.overture.dms.ego.model.ApplicationRequest;
import bio.overture.dms.ego.model.EgoGroup;
import bio.overture.dms.ego.model.EgoPolicy;
import bio.overture.dms.ego.model.GroupRequest;
import bio.overture.dms.ego.model.PolicyRequest;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.val;

@RequiredArgsConstructor
public class EgoDMSProvisioner {

  private static final String APPROVED = "APPROVED";

  @NonNull private final EgoService egoService;

  public void provision(@NonNull EgoDmsProvisionSpec spec) {
    provisionDmsGroupPermissions(spec);
    //    provisionApplication(spec.getDmsUiAppCredential());
    provisionApplication(spec.getEgoUiAppCredential());
  }

  public EgoGroup provisionGroup(@NonNull String groupName) {
    val groupRequest = GroupRequest.builder().name(groupName).status(APPROVED).build();
    return egoService.saveGroup(groupRequest);
  }

  public EgoPolicy provisionPolicy(@NonNull String policyName) {
    val policyRequest = PolicyRequest.builder().name(policyName).build();
    return egoService.savePolicy(policyRequest);
  }

  public void provisionApplication(@NonNull AppCredential appCredential) {
    val r =
        ApplicationRequest.builder()
            .clientId(appCredential.getClientId())
            .clientSecret(appCredential.getClientSecret())
            .name(appCredential.getName())
            .redirectUri(appCredential.getRedirectUri())
            .type("ADMIN")
            .status("APPROVED")
            .description(
                "DO NOT EDIT - Autogenerated by DMS - "
                    + appCredential.getName()
                    + " application credentials")
            .build();
    egoService.saveApplication(r);
  }

  private void provisionDmsGroupPermissions(EgoDmsProvisionSpec spec) {
    val dmsAdminGroup = provisionGroup(spec.getDmsGroupName());
    val dmsPolicy = provisionPolicy(spec.getDmsPolicyName());
    //    val songPolicy = provisionPolicy(spec.getSongPolicyName());
    //    val scorePolicy = provisionPolicy(spec.getScorePolicyName());

    // Create DMS permission, if it doesnt already exist
    egoService.createGroupPermission(dmsAdminGroup.getName(), dmsPolicy.getName(), WRITE);

    //    // Create SONG permissions for the dms-admin group, if it doesnt already exist
    //    egoService.createGroupPermission(dmsAdminGroup.getName(), songPolicy.getName(), WRITE);
    //
    //    // Create SCORE permissions for the dms-admin group, if it doesnt already exist
    //    egoService.createGroupPermission(dmsAdminGroup.getName(), scorePolicy.getName(), WRITE);
  }
}
