package bio.overture.dms.compose.deployment;

import static bio.overture.dms.ego.model.PermissionMasks.WRITE;

import bio.overture.dms.core.model.dmsconfig.AppCredential;
import bio.overture.dms.ego.client.EgoService;
import bio.overture.dms.ego.model.ApplicationRequest;
import bio.overture.dms.ego.model.EgoGroup;
import bio.overture.dms.ego.model.EgoPolicy;
import bio.overture.dms.ego.model.GroupRequest;
import bio.overture.dms.ego.model.PermissionMasks;
import bio.overture.dms.ego.model.PolicyRequest;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.val;

/** Convenience class that contains sensible defaults used to manage EGO */
@RequiredArgsConstructor
public class SimpleProvisionService {

  private static final String APPROVED = "APPROVED";

  @NonNull private final EgoService egoService;

  public EgoGroup provisionGroup(@NonNull String groupName) {
    val groupRequest = GroupRequest.builder().name(groupName).status(APPROVED).build();
    return egoService.saveGroup(groupRequest);
  }

  public EgoPolicy provisionPolicy(@NonNull String policyName) {
    val policyRequest = PolicyRequest.builder().name(policyName).build();
    return egoService.savePolicy(policyRequest);
  }

  public void provisionApplication(@NonNull AppCredential appCredential) {
    val r =
        ApplicationRequest.builder()
            .clientId(appCredential.getClientId())
            .clientSecret(appCredential.getClientSecret())
            .name(appCredential.getName())
            .redirectUri(appCredential.getRedirectUri())
            .type("ADMIN")
            .status("APPROVED")
            .description(
                "DO NOT EDIT - Autogenerated by DMS - "
                    + appCredential.getName()
                    + " application credentials")
            .build();
    egoService.saveApplication(r);
  }

  public void provisionGroupWritePermission(@NonNull String groupName, @NonNull String policyName) {
    provisionGroupPermission(groupName, policyName, WRITE);
  }

  public void provisionGroupPermission(
      @NonNull String groupName,
      @NonNull String policyName,
      @NonNull PermissionMasks permissionMask) {
    val group = provisionGroup(groupName);
    val policy = provisionPolicy(policyName);

    // Create SONG permission, if it doesnt already exist
    egoService.createGroupPermission(group.getName(), policy.getName(), permissionMask);
  }

  public static SimpleProvisionService createSimpleProvisionService(
      @NonNull EgoService egoService) {
    return new SimpleProvisionService(egoService);
  }
}
