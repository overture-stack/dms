# For more info on the api, refer to:
#  SwaggerEditor: https://editor.swagger.io/
#  OpenAPI: https://docs.docker.com/engine/api/v1.40.yaml
# All durations are in nanotime
Name: maestro
TaskTemplate:
  ContainerSpec:
    Image: "ghcr.io/overture-stack/maestro:3.7.0"
    Env:
      - SERVER_PORT=$dmsConfig.maestro.hostPort
      - management.health.elasticsearch.enabled=false
#if( $dmsConfig.clusterRunMode == 'LOCAL')
      - MAESTRO.ELASTICSEARCH.CLUSTERNODES=localhost:$dmsConfig.elasticsearch.hostPort
      - MAESTRO_REPOSITORIES_0_URL=http://localhost:$dmsConfig.song.api.hostPort
#else
      - MAESTRO.ELASTICSEARCH.CLUSTERNODES=${composeServiceResources.ELASTICSEARCH.toString()}:$dmsConfig.elasticsearch.hostPort
      - MAESTRO_REPOSITORIES_0_URL=http://${composeServiceResources.SONG_API.toString()}:$dmsConfig.song.api.hostPort
#end
      - MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_NAME=$dmsConfig.maestro.fileCentricIndexName
      - MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_ALIAS=$dmsConfig.maestro.fileCentricAlias
      - MAESTRO_REPOSITORIES_0_CODE=song.overture
      - MAESTRO_DISABLEEVENTINDEXING=true
      - MAESTRO_ELASTICSEARCH_INDEXES_ANALYSISCENTRIC_ENABLED=false
      - MAESTRO_REPOSITORIES_0_NAME=song.overture
      - SPRING_CODEC_MAXINMEMORYSIZE=-1
      - MAESTRO_REPOSITORIES_0_ORGANIZATION=local_song_organization
      - MAESTRO_REPOSITORIES_0_COUNTRY=local_song_country
#if( $dmsConfig.elasticsearch.security.enabled )
      - MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_USER=elastic
      - MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_PASSWORD=$dmsConfig.elasticsearch.security.rootPassword
      - MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_ENABLED=$dmsConfig.elasticsearch.security.enabled
#end
    Duration: null
    StopGracePeriod: 120000000000
    DNSConfig: null
    OpenStdin: false
    ReadOnly: false
    Hosts: null
    Hostname: null
    Secrets: null
    HealthCheck:
      Interval: 5000000000
      Timeout: 5000000000
      Retries: 5
      StartPeriod: 5000000000
    StopSignal: "SIGINT"
    Privileges: null
    Configs: null
  Resources:
    Limits:
#if( $dmsConfig.clusterRunMode == 'PRODUCTION')
      #2 GiB
      MemoryBytes: 2100000000
#end
      #unlimited.
      NanoCPUs: 0
    Reservations:
#if( $dmsConfig.clusterRunMode == 'PRODUCTION')
      #600 MiB
      MemoryBytes: 600000000
#end
      #unlimited.
      NanoCPUs: 0
  # NOTE: For the reasons mentioned here https://github.com/docker-library/postgres/issues/101,
  # when the restartpolicy is defined, postgres cannot restart normally.
  RestartPolicy: null
  Placement: null
  LogDriver:
    Name: "json-file"
    Options: null
  ForceUpdate: 0
  Networks:
#if( $dmsConfig.clusterRunMode == 'LOCAL')
      - Target: host
        Aliases: null
#else
      - Target: $dmsConfig.network
        Aliases: null
#end
  Runtime: null
Mode:
  Replicated:
    Replicas: 1
  Global: null
UpdateConfig:
  FailureAction: "rollback"
  Order: "start-first"
  Parallelism: null
  Delay: null
  MaxFailureRatio: null
  Monitor: null
RollbackConfig:
  FailureAction: "continue"
  Order: "start-first"
  Parallelism: null
  Delay: null
  MaxFailureRatio: 0.8
  Monitor: null
Networks:
#if( $dmsConfig.clusterRunMode == 'LOCAL')
  - Target: host
    Aliases: null
#else
  - Target: $dmsConfig.network
    Aliases: null
#end
EndpointSpec:
  Mode: "vip"
  Ports:
    - Name: "http"
      Protocol: "tcp"
      TargetPort: $dmsConfig.maestro.hostPort
      PublishedPort: $dmsConfig.maestro.hostPort
#if( $dmsConfig.clusterRunMode == 'LOCAL')
      PublishMode: host
#else
      PublishMode: ingress
#end
Labels: null

