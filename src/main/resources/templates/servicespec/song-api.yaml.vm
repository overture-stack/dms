# For more info on the api, refer to:
#  SwaggerEditor: https://editor.swagger.io/
#  OpenAPI: https://docs.docker.com/engine/api/v1.40.yaml
# All durations are in nanotime
Name: song-api
TaskTemplate:
  ContainerSpec:
    Image: "overture/song-server:4.4.0"
    Env:
      - SERVER_PORT=$dmsConfig.song.api.hostPort
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_LOCATIONS=classpath:flyway/sql,classpath:db/migration
      - SPRING_PROFILES_ACTIVE=prod,secure,jwt,score-client-cred,default
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=$dmsConfig.song.db.databasePassword
      - AUTH_SERVER_TOKENNAME=apiKey
      - AUTH_SERVER_CLIENTID=$dmsConfig.song.api.appCredential.clientId
      - AUTH_SERVER_CLIENTSECRET=$dmsConfig.song.api.appCredential.clientSecret
      - AUTH_SERVER_SCOPE_STUDY_PREFIX=DMS.
      - AUTH_SERVER_SCOPE_STUDY_SUFFIX=.WRITE
      - AUTH_SERVER_SCOPE_SYSTEM=SONG.WRITE
      - ID_USELOCAL=true
#if( $dmsConfig.clusterRunMode == 'LOCAL')
      - AUTH_SERVER_URL=http://localhost:$dmsConfig.ego.api.hostPort/o/check_api_key
      - AUTH_JWT_PUBLICKEYURL=http://localhost:$dmsConfig.ego.api.hostPort/oauth/token/public_key
      - SCORE_URL=http://localhost:$dmsConfig.score.api.hostPort
      - SCORE_CLIENTCREDENTIALS_TOKENURL=http://localhost:$dmsConfig.ego.api.hostPort/oauth/token
      - SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:$dmsConfig.song.db.hostPort/song?stringtype=unspecified
#else
      - AUTH_JWT_PUBLICKEYURL=${dmsConfig.ego.api.url}/oauth/token/public_key
      - SCORE_URL=http://${composeServiceResources.SCORE_API.toString()}:$dmsConfig.score.api.hostPort
      - SCORE_CLIENTCREDENTIALS_TOKENURL=${dmsConfig.ego.api.url}/oauth/token
      - AUTH_SERVER_URL=${dmsConfig.ego.api.url}/o/check_api_key
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${composeServiceResources.SONG_DB.toString()}:$dmsConfig.song.db.hostPort/song?stringtype=unspecified
#end
      - SCORE_CLIENTCREDENTIALS_ID=$dmsConfig.song.api.appCredential.clientId
      - SCORE_CLIENTCREDENTIALS_SECRET=$dmsConfig.song.api.appCredential.clientSecret
      - SCORE_CLIENTCREDENTIALS_SYSTEMSCOPE=SCORE.WRITE
    Mounts: null
    Duration: null
    StopGracePeriod: 120000000000
    DNSConfig: null
    OpenStdin: false
    ReadOnly: false
    Hosts: null
    Hostname: null
    Secrets: null
    HealthCheck: null
    StopSignal: "SIGINT"
    Privileges: null
    Configs: null

  Resources:
    Limits:
#if( $dmsConfig.clusterRunMode == 'PRODUCTION')
      #2 GiB
      MemoryBytes: 2147483648
#end
      #unlimited.
      NanoCPUs: 0
    Reservations:
#if( $dmsConfig.clusterRunMode == 'PRODUCTION')
      #1.5 GiB
      MemoryBytes: 1610612736
#end
      #unlimited.
      NanoCPUs: 0
  RestartPolicy:
    Condition: "on-failure"
    # 10s
    Delay: 10000000000
    MaxAttempts: 0
    # unbounded
    Window: 0
  Placement: null
  LogDriver:
    Name: "json-file"
    Options: null
  ForceUpdate: 0
  Networks:
    #if( $dmsConfig.clusterRunMode == 'LOCAL')
      - Target: host
        Aliases: null
    #else
      - Target: $dmsConfig.network
        Aliases: null
    #end
  Runtime: null
Mode:
  Replicated:
    Replicas: 1
  Global: null
UpdateConfig:
  FailureAction: "rollback"
  #Since there is a shared volume, containing process information
  # need to ensure its stopped first
  Order: "start-first"
  Parallelism: null
  Delay: null
  MaxFailureRatio: null
  Monitor: null
RollbackConfig:
  FailureAction: "continue"
  #Since there is a shared volume, containing process information
  # need to ensure its stopped first
  Order: "start-first"
  Parallelism: null
  Delay: null
  MaxFailureRatio: 0.8
  Monitor: null
Networks:
#if( $dmsConfig.clusterRunMode == 'LOCAL')
  - Target: host
    Aliases: null
#else
  - Target: $dmsConfig.network
    Aliases: null
#end
EndpointSpec:
  Mode: "vip"
  Ports:
    - Name: "api"
      Protocol: "tcp"
      TargetPort: $dmsConfig.song.api.hostPort
      PublishedPort: $dmsConfig.song.api.hostPort
#if( $dmsConfig.clusterRunMode == 'LOCAL')
      PublishMode: host
#else
      PublishMode: ingress
#end
Labels: null

