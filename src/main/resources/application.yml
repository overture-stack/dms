

terminal:
  ansi: true
  silent: false
  width: 80

async:
  threadCount: -1
  timeoutSeconds: 14400

ego:
  client:
    timeout-seconds:
      call: 10
      connect: 10
      read: 10
      write: 10
    retry:
      max-attempts: 5
      initial-seconds: 2
      max-seconds: 256
      multiplier: 2.0

compose:
  network: dms-swarm-network

docker:
  #NOTE: Indicates if this application is RUNNING-AS a docker container on the host machine. If false, then it is running on bare-metal on the host machine. This is mostly to help resolve the what URLs the DMS uses to interact with the services. If its RUNNING-AS a docker container, then it will be in the dms swarm network, and so it can use the service names as the domain in the urls, since docker will resolve the IP. If its not, then the url for the service will be used.
  run-as: false
  # If blank, will use the system default docker daemon. Useful for using a remote docker daemon.
  host: ""

  # this is needed to enable host mounts to be able to mount things
  # like the custom logo for example in dms ui.
  # since running in docker will hide the original host path we need to know
  # it somehow, this is provided in dms-docker script as an env var.
  # when running without docker, we get the home path from the system properties.
  dmsHomeHostPath: /home/ubuntu/.dms

  # This is used to print and store the version correctly, it will be provided as an env var
  # in local development mode (i.e. non docker) it will be read from here (or from env if provided)
  tag: 1.1.0-abc12